// <auto-generated />
using System;
using GoldenReports.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GoldenReports.Persistence.Migrations
{
    [DbContext(typeof(GoldenReportsDbContext))]
    [Migration("20221226175528_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GoldenReports.Domain.Assets.NamespaceAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_namespace_asset");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("NamespaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_namespace");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("character varying(750)")
                        .HasColumnName("path");

                    b.HasKey("Id")
                        .HasName("PK_NamespaceAsset");

                    b.HasAlternateKey("NamespaceId", "Name")
                        .HasName("UK_NamespaceAsset_Name");

                    b.ToTable("namespace_asset", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Assets.ReportAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_report_asset");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("character varying(750)")
                        .HasColumnName("path");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_report");

                    b.HasKey("Id")
                        .HasName("PK_ReportAsset");

                    b.HasAlternateKey("ReportId", "Name")
                        .HasName("UK_ReportAsset_Name");

                    b.ToTable("report_asset", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Data.DataContext", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_data_context");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("NamespaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_namespace");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("schema");

                    b.HasKey("Id")
                        .HasName("PK_DataContext");

                    b.HasAlternateKey("Name")
                        .HasName("UK_DataContext_Name");

                    b.HasIndex("NamespaceId")
                        .HasDatabaseName("ix_data_context_namespace_id");

                    b.ToTable("data_context", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Data.DataSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_data_source");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("character varying(750)")
                        .HasColumnName("connection_string");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasMaxLength(750)
                        .HasColumnType("character varying(750)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("NamespaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_namespace");

                    b.HasKey("Id")
                        .HasName("PK_DataSource");

                    b.HasAlternateKey("Code")
                        .HasName("UK_DataSource_Code");

                    b.HasIndex("NamespaceId")
                        .HasDatabaseName("ix_data_source_namespace_id");

                    b.ToTable("data_source", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Namespaces.Namespace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_namespace");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_parent");

                    b.HasKey("Id")
                        .HasName("PK_Namespace");

                    b.HasAlternateKey("Name")
                        .HasName("UK_Namespace_Name");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_namespace_parent_id");

                    b.ToTable("namespace", "golden_reports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("745e002d-9b7b-452c-9f1e-bcd439bde28f"),
                            CreationDate = new DateTime(2022, 12, 21, 4, 18, 20, 850, DateTimeKind.Utc),
                            Description = "Global namespace",
                            ModificationDate = new DateTime(2022, 12, 21, 4, 18, 20, 850, DateTimeKind.Utc),
                            Name = "Global"
                        });
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.Elements.ReportElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_report_element");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("GridArea")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("grid_area");

                    b.Property<int>("HorizontalAlignment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("horizontal_alignment");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_section");

                    b.Property<int>("VerticalAlignment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("vertical_alignment");

                    b.Property<int>("ZIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("z_index");

                    b.HasKey("Id")
                        .HasName("PK_ReportElement");

                    b.HasAlternateKey("SectionId", "Name")
                        .HasName("UK_ReportElement_Name");

                    b.ToTable("report_element", "golden_reports");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_report_definition");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("NamespaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_namespace");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_parent");

                    b.Property<string>("Query")
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)")
                        .HasColumnName("query");

                    b.Property<string>("Styles")
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)")
                        .HasColumnName("styles");

                    b.HasKey("Id")
                        .HasName("PK_ReportDefinition");

                    b.HasAlternateKey("NamespaceId", "Name")
                        .HasName("UK_ReportDefinition_Name");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_report_definition_parent_id");

                    b.ToTable("report_definition", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_report_page");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("PageConditionExpression")
                        .HasMaxLength(750)
                        .HasColumnType("character varying(750)")
                        .HasColumnName("page_condition_expression");

                    b.Property<string>("Query")
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)")
                        .HasColumnName("query");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_report");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK_ReportPage");

                    b.HasAlternateKey("ReportId", "Name")
                        .HasName("UK_ReportPage_Name");

                    b.ToTable("report_page", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_report_parameter");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("text")
                        .HasColumnName("default_value");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_report");

                    b.Property<bool>("Required")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("required");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK_ReportParameter");

                    b.HasAlternateKey("ReportId", "Name")
                        .HasName("UK_ReportParameter_Name");

                    b.ToTable("report_parameter", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_report_section");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("GridTemplate")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("character varying(750)")
                        .HasColumnName("grid_template");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_page");

                    b.HasKey("Id")
                        .HasName("PK_ReportSection");

                    b.HasAlternateKey("PageId", "Name")
                        .HasName("UK_ReportSection_Name");

                    b.ToTable("report_section", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportVariable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_report_variable");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("character varying(750)")
                        .HasColumnName("expression");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_report");

                    b.HasKey("Id")
                        .HasName("PK_ReportVariable");

                    b.HasAlternateKey("ReportId", "Name")
                        .HasName("UK_ReportVariable_Name");

                    b.ToTable("report_variable", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Security.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<Guid?>("NamespaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("namespace_id");

                    b.HasKey("Id")
                        .HasName("pk_permission");

                    b.HasIndex("NamespaceId")
                        .HasDatabaseName("ix_permission_namespace_id");

                    b.ToTable("permission", (string)null);
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.Elements.BarcodeElement", b =>
                {
                    b.HasBaseType("GoldenReports.Domain.Reports.Elements.ReportElement");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)")
                        .HasColumnName("value");

                    b.ToTable("barcode_element", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.Elements.BoxElement", b =>
                {
                    b.HasBaseType("GoldenReports.Domain.Reports.Elements.ReportElement");

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("background_color");

                    b.ToTable("box_element", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.Elements.ImageElement", b =>
                {
                    b.HasBaseType("GoldenReports.Domain.Reports.Elements.ReportElement");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("asset_name");

                    b.ToTable("image_element", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.Elements.LabelElement", b =>
                {
                    b.HasBaseType("GoldenReports.Domain.Reports.Elements.ReportElement");

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("background_color");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("character varying(750)")
                        .HasColumnName("text");

                    b.Property<string>("TextColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("text_color");

                    b.Property<string>("TextSize")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("text_size");

                    b.ToTable("label_element", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.Elements.ListElement", b =>
                {
                    b.HasBaseType("GoldenReports.Domain.Reports.Elements.ReportElement");

                    b.ToTable("list_element", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.Elements.SubReportElement", b =>
                {
                    b.HasBaseType("GoldenReports.Domain.Reports.Elements.ReportElement");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("character varying(750)")
                        .HasColumnName("path");

                    b.ToTable("sub_report_element", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.Elements.TableElement", b =>
                {
                    b.HasBaseType("GoldenReports.Domain.Reports.Elements.ReportElement");

                    b.ToTable("table_element", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Assets.NamespaceAsset", b =>
                {
                    b.HasOne("GoldenReports.Domain.Namespaces.Namespace", "Namespace")
                        .WithMany("Assets")
                        .HasForeignKey("NamespaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NamespaceAsset_Namespace");

                    b.Navigation("Namespace");
                });

            modelBuilder.Entity("GoldenReports.Domain.Assets.ReportAsset", b =>
                {
                    b.HasOne("GoldenReports.Domain.Reports.ReportDefinition", "Report")
                        .WithMany("Assets")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportAsset_ReportDefinition");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("GoldenReports.Domain.Data.DataContext", b =>
                {
                    b.HasOne("GoldenReports.Domain.Namespaces.Namespace", "Namespace")
                        .WithMany("DataContexts")
                        .HasForeignKey("NamespaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DataContext_Namespace");

                    b.Navigation("Namespace");
                });

            modelBuilder.Entity("GoldenReports.Domain.Data.DataSource", b =>
                {
                    b.HasOne("GoldenReports.Domain.Namespaces.Namespace", "Namespace")
                        .WithMany("DataSources")
                        .HasForeignKey("NamespaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DataSource_Namespace");

                    b.Navigation("Namespace");
                });

            modelBuilder.Entity("GoldenReports.Domain.Namespaces.Namespace", b =>
                {
                    b.HasOne("GoldenReports.Domain.Namespaces.Namespace", "Parent")
                        .WithMany("Namespaces")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Namespace_Namespace");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.Elements.ReportElement", b =>
                {
                    b.HasOne("GoldenReports.Domain.Reports.ReportSection", "Section")
                        .WithMany("Elements")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportElement_ReportSection");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportDefinition", b =>
                {
                    b.HasOne("GoldenReports.Domain.Namespaces.Namespace", "Namespace")
                        .WithMany("Reports")
                        .HasForeignKey("NamespaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportDefinition_Namespace");

                    b.HasOne("GoldenReports.Domain.Reports.ReportDefinition", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_ReportDefinition_ReportDefinitionParent");

                    b.Navigation("Namespace");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportPage", b =>
                {
                    b.HasOne("GoldenReports.Domain.Reports.ReportDefinition", "Report")
                        .WithMany("Pages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportPage_ReportDefinition");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportParameter", b =>
                {
                    b.HasOne("GoldenReports.Domain.Reports.ReportDefinition", "Report")
                        .WithMany("Parameters")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportParameter_ReportDefinition");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportSection", b =>
                {
                    b.HasOne("GoldenReports.Domain.Reports.ReportPage", "Page")
                        .WithMany("Sections")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportSection_ReportPage");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportVariable", b =>
                {
                    b.HasOne("GoldenReports.Domain.Reports.ReportDefinition", "Report")
                        .WithMany("Variables")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportVariable_ReportDefinition");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("GoldenReports.Domain.Security.Permission", b =>
                {
                    b.HasOne("GoldenReports.Domain.Namespaces.Namespace", null)
                        .WithMany("Permissions")
                        .HasForeignKey("NamespaceId")
                        .HasConstraintName("fk_permission_namespaces_namespace_id");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.Elements.BarcodeElement", b =>
                {
                    b.HasOne("GoldenReports.Domain.Reports.Elements.ReportElement", null)
                        .WithOne()
                        .HasForeignKey("GoldenReports.Domain.Reports.Elements.BarcodeElement", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_barcode_element_report_element_id_report_element");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.Elements.BoxElement", b =>
                {
                    b.HasOne("GoldenReports.Domain.Reports.Elements.ReportElement", null)
                        .WithOne()
                        .HasForeignKey("GoldenReports.Domain.Reports.Elements.BoxElement", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_box_element_report_element_id_report_element");

                    b.OwnsOne("GoldenReports.Domain.Reports.Border", "BottomBorder", b1 =>
                        {
                            b1.Property<Guid>("BoxElementId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Color")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("bottom_border_color");

                            b1.Property<double>("Thickness")
                                .HasColumnType("double precision")
                                .HasColumnName("bottom_border_thickness");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("bottom_border_type");

                            b1.HasKey("BoxElementId");

                            b1.ToTable("box_element", "golden_reports");

                            b1.WithOwner()
                                .HasForeignKey("BoxElementId")
                                .HasConstraintName("fk_box_element_box_element_id");
                        });

                    b.OwnsOne("GoldenReports.Domain.Reports.Border", "LeftBorder", b1 =>
                        {
                            b1.Property<Guid>("BoxElementId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Color")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("left_border_color");

                            b1.Property<double>("Thickness")
                                .HasColumnType("double precision")
                                .HasColumnName("left_border_thickness");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("left_border_type");

                            b1.HasKey("BoxElementId");

                            b1.ToTable("box_element", "golden_reports");

                            b1.WithOwner()
                                .HasForeignKey("BoxElementId")
                                .HasConstraintName("fk_box_element_box_element_id");
                        });

                    b.OwnsOne("GoldenReports.Domain.Reports.Border", "RightBorder", b1 =>
                        {
                            b1.Property<Guid>("BoxElementId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Color")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("right_border_color");

                            b1.Property<double>("Thickness")
                                .HasColumnType("double precision")
                                .HasColumnName("right_border_thickness");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("right_border_type");

                            b1.HasKey("BoxElementId");

                            b1.ToTable("box_element", "golden_reports");

                            b1.WithOwner()
                                .HasForeignKey("BoxElementId")
                                .HasConstraintName("fk_box_element_box_element_id");
                        });

                    b.OwnsOne("GoldenReports.Domain.Reports.Border", "TopBorder", b1 =>
                        {
                            b1.Property<Guid>("BoxElementId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Color")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("top_border_color");

                            b1.Property<double>("Thickness")
                                .HasColumnType("double precision")
                                .HasColumnName("top_border_thickness");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("top_border_type");

                            b1.HasKey("BoxElementId");

                            b1.ToTable("box_element", "golden_reports");

                            b1.WithOwner()
                                .HasForeignKey("BoxElementId")
                                .HasConstraintName("fk_box_element_box_element_id");
                        });

                    b.Navigation("BottomBorder")
                        .IsRequired();

                    b.Navigation("LeftBorder")
                        .IsRequired();

                    b.Navigation("RightBorder")
                        .IsRequired();

                    b.Navigation("TopBorder")
                        .IsRequired();
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.Elements.ImageElement", b =>
                {
                    b.HasOne("GoldenReports.Domain.Reports.Elements.ReportElement", null)
                        .WithOne()
                        .HasForeignKey("GoldenReports.Domain.Reports.Elements.ImageElement", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_element_report_element_id_report_element");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.Elements.LabelElement", b =>
                {
                    b.HasOne("GoldenReports.Domain.Reports.Elements.ReportElement", null)
                        .WithOne()
                        .HasForeignKey("GoldenReports.Domain.Reports.Elements.LabelElement", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_label_element_report_element_id_report_element");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.Elements.ListElement", b =>
                {
                    b.HasOne("GoldenReports.Domain.Reports.Elements.ReportElement", null)
                        .WithOne()
                        .HasForeignKey("GoldenReports.Domain.Reports.Elements.ListElement", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_list_element_report_element_id_report_element");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.Elements.SubReportElement", b =>
                {
                    b.HasOne("GoldenReports.Domain.Reports.Elements.ReportElement", null)
                        .WithOne()
                        .HasForeignKey("GoldenReports.Domain.Reports.Elements.SubReportElement", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sub_report_element_report_element_id_report_element");

                    b.OwnsMany("GoldenReports.Domain.Reports.ParameterValue", "Parameters", b1 =>
                        {
                            b1.Property<Guid>("IdParameterValue")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id_parameter_value");

                            b1.Property<Guid>("IdSubReportElement")
                                .HasColumnType("uuid")
                                .HasColumnName("id_sub_report_element");

                            b1.Property<string>("Parameter")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("parameter");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(750)
                                .HasColumnType("character varying(750)")
                                .HasColumnName("value");

                            b1.HasKey("IdParameterValue")
                                .HasName("PK_ParameterValue");

                            b1.HasIndex("IdSubReportElement")
                                .HasDatabaseName("ix_parameter_value_id_sub_report_element");

                            b1.ToTable("parameter_value", "golden_reports");

                            b1.WithOwner()
                                .HasForeignKey("IdSubReportElement")
                                .HasConstraintName("FK_ParameterValue_SubReportElement");
                        });

                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.Elements.TableElement", b =>
                {
                    b.HasOne("GoldenReports.Domain.Reports.Elements.ReportElement", null)
                        .WithOne()
                        .HasForeignKey("GoldenReports.Domain.Reports.Elements.TableElement", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_table_element_report_element_id_report_element");
                });

            modelBuilder.Entity("GoldenReports.Domain.Namespaces.Namespace", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("DataContexts");

                    b.Navigation("DataSources");

                    b.Navigation("Namespaces");

                    b.Navigation("Permissions");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportDefinition", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Pages");

                    b.Navigation("Parameters");

                    b.Navigation("Variables");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportPage", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportSection", b =>
                {
                    b.Navigation("Elements");
                });
#pragma warning restore 612, 618
        }
    }
}
