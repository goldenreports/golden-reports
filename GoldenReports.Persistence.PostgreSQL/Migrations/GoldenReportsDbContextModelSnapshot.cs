// <auto-generated />
using System;
using GoldenReports.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GoldenReports.Persistence.Migrations
{
    [DbContext(typeof(GoldenReportsDbContext))]
    partial class GoldenReportsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GoldenReports.Domain.Assets.NamespaceAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_namespace_asset");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("NamespaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_namespace");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("character varying(750)")
                        .HasColumnName("path");

                    b.HasKey("Id")
                        .HasName("PK_NamespaceAsset");

                    b.HasAlternateKey("NamespaceId", "Name")
                        .HasName("UK_NamespaceAsset_Name");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_namespace_asset_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_namespace_asset_modified_by_id");

                    b.ToTable("namespace_asset", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Assets.ReportAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_report_asset");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("character varying(750)")
                        .HasColumnName("path");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_report");

                    b.HasKey("Id")
                        .HasName("PK_ReportAsset");

                    b.HasAlternateKey("ReportId", "Name")
                        .HasName("UK_ReportAsset_Name");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_report_asset_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_report_asset_modified_by_id");

                    b.ToTable("report_asset", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Data.DataContext", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_data_context");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("NamespaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_namespace");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("schema");

                    b.HasKey("Id")
                        .HasName("PK_DataContext");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_data_context_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_data_context_modified_by_id");

                    b.HasIndex("NamespaceId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_DataContext_Name");

                    b.ToTable("data_context", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Data.DataSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_data_source");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("character varying(750)")
                        .HasColumnName("connection_string");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasMaxLength(750)
                        .HasColumnType("character varying(750)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("NamespaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_namespace");

                    b.HasKey("Id")
                        .HasName("PK_DataSource");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_DataSource_Code");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_data_source_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_data_source_modified_by_id");

                    b.HasIndex("NamespaceId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_DataSource_Name");

                    b.ToTable("data_source", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Namespaces.Namespace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_namespace");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_parent");

                    b.HasKey("Id")
                        .HasName("PK_Namespace");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_namespace_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_namespace_modified_by_id");

                    b.HasIndex("ParentId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Namespace_Name");

                    b.ToTable("namespace", "golden_reports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("745e002d-9b7b-452c-9f1e-bcd439bde28f"),
                            CreationDate = new DateTime(2022, 12, 21, 4, 18, 20, 850, DateTimeKind.Utc),
                            Description = "Global namespace",
                            ModificationDate = new DateTime(2022, 12, 21, 4, 18, 20, 850, DateTimeKind.Utc),
                            Name = "Global"
                        });
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_report_definition");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("NamespaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_namespace");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_parent");

                    b.Property<string>("Query")
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)")
                        .HasColumnName("query");

                    b.Property<string>("Styles")
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)")
                        .HasColumnName("styles");

                    b.Property<string>("Template")
                        .HasColumnType("text")
                        .HasColumnName("template");

                    b.HasKey("Id")
                        .HasName("PK_ReportDefinition");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_report_definition_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_report_definition_modified_by_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_report_definition_parent_id");

                    b.HasIndex("NamespaceId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_ReportDefinition_Name");

                    b.ToTable("report_definition", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_report_parameter");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("text")
                        .HasColumnName("default_value");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_report");

                    b.Property<bool>("Required")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("required");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK_ReportParameter");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_report_parameter_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_report_parameter_modified_by_id");

                    b.HasIndex("ReportId", "Name")
                        .IsUnique()
                        .HasDatabaseName("UK_ReportParameter_Name");

                    b.ToTable("report_parameter", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportVariable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_report_variable");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("character varying(750)")
                        .HasColumnName("expression");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_report");

                    b.HasKey("Id")
                        .HasName("PK_ReportVariable");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_report_variable_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_report_variable_modified_by_id");

                    b.HasIndex("ReportId", "Name")
                        .IsUnique()
                        .HasDatabaseName("UK_ReportVariable_Name");

                    b.ToTable("report_variable", "golden_reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Security.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<Guid?>("NamespaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("namespace_id");

                    b.HasKey("Id")
                        .HasName("pk_permission");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_permission_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_permission_modified_by_id");

                    b.HasIndex("NamespaceId")
                        .HasDatabaseName("ix_permission_namespace_id");

                    b.ToTable("permission", (string)null);
                });

            modelBuilder.Entity("GoldenReports.Domain.Security.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_user");

                    b.Property<string>("AuthContextKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("auth_context_key");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_created_by");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modification_date");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("id_modified_by");

                    b.HasKey("Id")
                        .HasName("PK_User");

                    b.HasAlternateKey("AuthContextKey")
                        .HasName("UK_User");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_user_id_created_by");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_user_modified_by_id");

                    b.ToTable("user", "golden_reports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("83a661ae-9e59-4777-b3ef-bf3586f7798e"),
                            AuthContextKey = "golden-reports-system-user",
                            CreationDate = new DateTime(2022, 12, 21, 4, 18, 20, 850, DateTimeKind.Utc),
                            FirstName = "System",
                            LastName = "User",
                            ModificationDate = new DateTime(2022, 12, 21, 4, 18, 20, 850, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("GoldenReports.Domain.Assets.NamespaceAsset", b =>
                {
                    b.HasOne("GoldenReports.Domain.Security.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_NamespaceAsset_User_CreatedBy");

                    b.HasOne("GoldenReports.Domain.Security.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("FK_NamespaceAsset_User_ModifiedBy");

                    b.HasOne("GoldenReports.Domain.Namespaces.Namespace", "Namespace")
                        .WithMany("Assets")
                        .HasForeignKey("NamespaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NamespaceAsset_Namespace");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Namespace");
                });

            modelBuilder.Entity("GoldenReports.Domain.Assets.ReportAsset", b =>
                {
                    b.HasOne("GoldenReports.Domain.Security.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_ReportAsset_User_CreatedBy");

                    b.HasOne("GoldenReports.Domain.Security.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("FK_ReportAsset_User_ModifiedBy");

                    b.HasOne("GoldenReports.Domain.Reports.ReportDefinition", "Report")
                        .WithMany("Assets")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportAsset_ReportDefinition");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("GoldenReports.Domain.Data.DataContext", b =>
                {
                    b.HasOne("GoldenReports.Domain.Security.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_DataContext_User_CreatedBy");

                    b.HasOne("GoldenReports.Domain.Security.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("FK_DataContext_User_ModifiedBy");

                    b.HasOne("GoldenReports.Domain.Namespaces.Namespace", "Namespace")
                        .WithMany("DataContexts")
                        .HasForeignKey("NamespaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DataContext_Namespace");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Namespace");
                });

            modelBuilder.Entity("GoldenReports.Domain.Data.DataSource", b =>
                {
                    b.HasOne("GoldenReports.Domain.Security.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_DataSource_User_CreatedBy");

                    b.HasOne("GoldenReports.Domain.Security.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("FK_DataSource_User_ModifiedBy");

                    b.HasOne("GoldenReports.Domain.Namespaces.Namespace", "Namespace")
                        .WithMany("DataSources")
                        .HasForeignKey("NamespaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DataSource_Namespace");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Namespace");
                });

            modelBuilder.Entity("GoldenReports.Domain.Namespaces.Namespace", b =>
                {
                    b.HasOne("GoldenReports.Domain.Security.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Namespace_User_CreatedBy");

                    b.HasOne("GoldenReports.Domain.Security.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("FK_Namespace_User_ModifiedBy");

                    b.HasOne("GoldenReports.Domain.Namespaces.Namespace", "Parent")
                        .WithMany("Namespaces")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Namespace_Namespace");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportDefinition", b =>
                {
                    b.HasOne("GoldenReports.Domain.Security.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_ReportDefinition_User_CreatedBy");

                    b.HasOne("GoldenReports.Domain.Security.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("FK_ReportDefinition_User_ModifiedBy");

                    b.HasOne("GoldenReports.Domain.Namespaces.Namespace", "Namespace")
                        .WithMany("Reports")
                        .HasForeignKey("NamespaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportDefinition_Namespace");

                    b.HasOne("GoldenReports.Domain.Reports.ReportDefinition", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_ReportDefinition_ReportDefinitionParent");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Namespace");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportParameter", b =>
                {
                    b.HasOne("GoldenReports.Domain.Security.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_ReportParameter_User_CreatedBy");

                    b.HasOne("GoldenReports.Domain.Security.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("FK_ReportParameter_User_ModifiedBy");

                    b.HasOne("GoldenReports.Domain.Reports.ReportDefinition", "Report")
                        .WithMany("Parameters")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportParameter_ReportDefinition");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportVariable", b =>
                {
                    b.HasOne("GoldenReports.Domain.Security.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_ReportVariable_User_CreatedBy");

                    b.HasOne("GoldenReports.Domain.Security.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("FK_ReportVariable_User_ModifiedBy");

                    b.HasOne("GoldenReports.Domain.Reports.ReportDefinition", "Report")
                        .WithMany("Variables")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReportVariable_ReportDefinition");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("GoldenReports.Domain.Security.Permission", b =>
                {
                    b.HasOne("GoldenReports.Domain.Security.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_permission_users_created_by_id");

                    b.HasOne("GoldenReports.Domain.Security.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_permission_users_modified_by_id");

                    b.HasOne("GoldenReports.Domain.Namespaces.Namespace", null)
                        .WithMany("Permissions")
                        .HasForeignKey("NamespaceId")
                        .HasConstraintName("fk_permission_namespaces_namespace_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GoldenReports.Domain.Security.User", b =>
                {
                    b.HasOne("GoldenReports.Domain.Security.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_User_User_CreatedBy");

                    b.HasOne("GoldenReports.Domain.Security.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("FK_User_User_ModifiedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("GoldenReports.Domain.Namespaces.Namespace", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("DataContexts");

                    b.Navigation("DataSources");

                    b.Navigation("Namespaces");

                    b.Navigation("Permissions");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("GoldenReports.Domain.Reports.ReportDefinition", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Parameters");

                    b.Navigation("Variables");
                });
#pragma warning restore 612, 618
        }
    }
}
